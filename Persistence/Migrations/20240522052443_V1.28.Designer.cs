// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240522052443_V1.28")]
    partial class V128
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Address", b =>
                {
                    b.Property<Guid>("Ad_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ad_Active")
                        .HasColumnType("bit");

                    b.Property<string>("Ad_Building")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Ad_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Ad_Creator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ad_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ad_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Ad_IsBilling")
                        .HasColumnType("bit");

                    b.Property<bool>("Ad_IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Ad_Modifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Ad_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ad_Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ad_State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ad_Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ad_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ad_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ad_Unit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ad_Zone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Cn_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Us_ID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Ad_ID");

                    b.HasIndex("Cn_ID");

                    b.HasIndex("Us_ID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Domain.Announcement", b =>
                {
                    b.Property<Guid>("An_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("An_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("An_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("An_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("An_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("An_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("An_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("An_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("An_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("An_Name_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("An_SendFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("An_SendTill")
                        .HasColumnType("datetime2");

                    b.Property<string>("An_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("An_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Md_ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("An_ID");

                    b.HasIndex("An_Creator");

                    b.HasIndex("An_Modifier");

                    b.HasIndex("Md_ID");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Domain.AnnouncementChannel", b =>
                {
                    b.Property<Guid>("AnCh_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AnCh_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AnCh_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("AnCh_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnCh_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnCh_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnCh_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AnCh_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AnCh_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnCh_Name_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnCh_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnCh_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AnCh_ID");

                    b.HasIndex("AnCh_Creator");

                    b.HasIndex("AnCh_Modifier");

                    b.ToTable("AnnouncementChannels");
                });

            modelBuilder.Entity("Domain.AnnouncementCondition", b =>
                {
                    b.Property<Guid>("AnCn_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AnCn_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AnCn_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("AnCn_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnCn_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnCn_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnCn_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AnCn_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AnCn_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnCn_Name_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnCn_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnCn_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AnPr_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("An_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Gr_ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AnCn_ID");

                    b.HasIndex("AnCn_Creator");

                    b.HasIndex("AnCn_Modifier");

                    b.HasIndex("AnPr_ID");

                    b.HasIndex("An_ID");

                    b.ToTable("AnnouncementConditions");
                });

            modelBuilder.Entity("Domain.AnnouncementConditionAnnouncementChannel", b =>
                {
                    b.Property<Guid>("AnCn_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnCh_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AnChGr_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AnChGr_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("AnChGr_Creator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnChGr_Modifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AnChGr_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("AnChGr_Ordinal")
                        .HasColumnType("int");

                    b.Property<string>("AnCnGr_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnCnGr_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AnCn_ID", "AnCh_ID");

                    b.HasIndex("AnCh_ID");

                    b.HasIndex("AnCnGr_Creator");

                    b.HasIndex("AnCnGr_Modifier");

                    b.ToTable("AnnouncementConditionAnnouncementChannels");
                });

            modelBuilder.Entity("Domain.AnnouncementConditionGroup", b =>
                {
                    b.Property<Guid>("AnCn_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Gr_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AnCnGr_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AnCnGr_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("AnCnGr_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnCnGr_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AnCnGr_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("AnCnGr_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("AnCn_Id", "Gr_ID");

                    b.HasIndex("AnCnGr_Creator");

                    b.HasIndex("AnCnGr_Modifier");

                    b.HasIndex("Gr_ID");

                    b.ToTable("AnnouncementConditionGroups");
                });

            modelBuilder.Entity("Domain.AnnouncementMessage", b =>
                {
                    b.Property<Guid>("AnMs_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnCh_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AnMs_Active")
                        .HasColumnType("bit");

                    b.Property<string>("AnMs_Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AnMs_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("AnMs_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnMs_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AnMs_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AnMs_Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("AnPr_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("An_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cs_ID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AnMs_ID");

                    b.HasIndex("AnCh_ID");

                    b.HasIndex("AnMs_Creator");

                    b.HasIndex("AnMs_Modifier");

                    b.HasIndex("AnPr_ID");

                    b.HasIndex("An_ID");

                    b.HasIndex("Cs_ID");

                    b.ToTable("AnnouncementMessages");
                });

            modelBuilder.Entity("Domain.AnnouncementPriority", b =>
                {
                    b.Property<Guid>("AnPr_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AnPr_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AnPr_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("AnPr_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AnPr_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnPr_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnPr_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AnPr_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AnPr_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnPr_Name_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnPr_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnPr_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AnPr_Weight")
                        .HasColumnType("int");

                    b.HasKey("AnPr_ID");

                    b.HasIndex("AnPr_Creator");

                    b.HasIndex("AnPr_Modifier");

                    b.ToTable("AnnouncementPriorities");
                });

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid>("Cn_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Md_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("Us_Active")
                        .HasColumnType("bit");

                    b.Property<bool>("Us_Admin")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Us_CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Us_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Us_Customer")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Us_DOB")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Us_Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Us_DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Us_FirebaseToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Us_FirebaseUID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Us_Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Us_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Us_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Us_SubscriptionDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Us_SubscriptionExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Us_SubscriptionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Us_SuperAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Us_language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("Us_Creator");

                    b.HasIndex("Us_Modifier");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Author", b =>
                {
                    b.Property<Guid>("At_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("At_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("At_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("At_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("At_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("At_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("At_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("At_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("At_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("At_Name_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("At_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("At_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Md_ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("At_ID");

                    b.HasIndex("At_Creator");

                    b.HasIndex("At_Modifier");

                    b.HasIndex("Md_ID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Domain.AuthorGenre", b =>
                {
                    b.Property<Guid>("At_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Gn_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AtGn_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("AtGn_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("AtGn_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("AtGn_ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("AtGn_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AtGn_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("At_ID", "Gn_ID");

                    b.HasIndex("AtGn_Creator");

                    b.HasIndex("AtGn_Modifier");

                    b.HasIndex("Gn_ID");

                    b.ToTable("AuthorGenres");
                });

            modelBuilder.Entity("Domain.Avatar", b =>
                {
                    b.Property<Guid>("Av_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Av_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Av_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Av_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Av_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Av_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Av_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Av_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Av_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Av_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Md_ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Av_ID");

                    b.HasIndex("Av_Creator");

                    b.HasIndex("Av_Modifier");

                    b.ToTable("Avatars");
                });

            modelBuilder.Entity("Domain.Banner", b =>
                {
                    b.Property<Guid>("Bn_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Bl_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Bn_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Bn_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Bn_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bn_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bn_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bn_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Bn_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Bn_PublishFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Bn_PublishTill")
                        .HasColumnType("datetime2");

                    b.Property<string>("Bn_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bn_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Gr_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Md_ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Bn_ID");

                    b.HasIndex("Bl_ID");

                    b.HasIndex("Bn_Creator");

                    b.HasIndex("Bn_Modifier");

                    b.HasIndex("Gr_ID");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("Domain.BannerBannerLocation", b =>
                {
                    b.Property<Guid>("Bn_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Bl_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BnBl_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BnBl_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("BnBl_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BnBl_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BnBl_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BnBl_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Bn_Id", "Bl_ID");

                    b.HasIndex("BnBl_Creator");

                    b.HasIndex("BnBl_Modifier");

                    b.ToTable("BannerBannerLocations");
                });

            modelBuilder.Entity("Domain.BannerGroup", b =>
                {
                    b.Property<Guid>("Bn_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Gr_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BnGr_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BnGr_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("BnGr_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BnGr_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BnGr_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BnGr_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Bn_Id", "Gr_ID");

                    b.HasIndex("BnGr_Creator");

                    b.HasIndex("BnGr_Modifier");

                    b.HasIndex("Gr_ID");

                    b.ToTable("BannerGroups");
                });

            modelBuilder.Entity("Domain.BannerLocation", b =>
                {
                    b.Property<Guid>("Bl_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Bl_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Bl_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Bl_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bl_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bl_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bl_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Bl_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<double>("Bl_Ratio")
                        .HasColumnType("float");

                    b.Property<string>("Bl_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bl_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Bl_ID");

                    b.HasIndex("Bl_Creator");

                    b.HasIndex("Bl_Modifier");

                    b.ToTable("BannerLocations");
                });

            modelBuilder.Entity("Domain.Book", b =>
                {
                    b.Property<Guid>("Bk_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Bk_Active")
                        .HasColumnType("bit");

                    b.Property<string>("Bk_Characters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bk_Characters_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bk_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Bk_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Bk_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bk_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bk_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bk_Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bk_Introduction_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bk_Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bk_LastViewedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Bk_LastViewedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Bk_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Bk_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Bk_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bk_Name_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bk_Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bk_Summary_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bk_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bk_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Bk_Trial")
                        .HasColumnType("bit");

                    b.Property<int>("Bk_ViewCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("Md_AudioAr_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Md_AudioEn_ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Bk_ID");

                    b.HasIndex("Bk_Creator");

                    b.HasIndex("Bk_LastViewedBy");

                    b.HasIndex("Bk_Modifier");

                    b.HasIndex("Md_AudioAr_ID");

                    b.HasIndex("Md_AudioEn_ID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Domain.BookAuthor", b =>
                {
                    b.Property<Guid>("Bk_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("At_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BkAt_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BkAt_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("BkAt_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BkAt_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BkAt_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BkAt_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Bk_ID", "At_ID");

                    b.HasIndex("At_ID");

                    b.HasIndex("BkAt_Creator");

                    b.HasIndex("BkAt_Modifier");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("Domain.BookBookCollection", b =>
                {
                    b.Property<Guid>("Bk_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Bc_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BkBc_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BkBc_CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("BkBc_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BkBc_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BkBc_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BkBc_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Bk_ID", "Bc_ID");

                    b.HasIndex("Bc_ID");

                    b.HasIndex("BkBc_Creator");

                    b.HasIndex("BkBc_Modifier");

                    b.ToTable("BookBookCollections");
                });

            modelBuilder.Entity("Domain.BookCategory", b =>
                {
                    b.Property<Guid>("Bk_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Ct_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BkCt_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BkCt_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("BkCt_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BkCt_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BkCt_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BkCt_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Bk_ID", "Ct_ID");

                    b.HasIndex("BkCt_Creator");

                    b.HasIndex("BkCt_Modifier");

                    b.HasIndex("Ct_ID");

                    b.ToTable("BookCategories");
                });

            modelBuilder.Entity("Domain.BookCollection", b =>
                {
                    b.Property<Guid>("Bc_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Bc_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Bc_CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Bc_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bc_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bc_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bc_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Bc_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Bc_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bc_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Md_ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Bc_ID");

                    b.HasIndex("Bc_Creator");

                    b.HasIndex("Bc_Modifier");

                    b.ToTable("BookCollections");
                });

            modelBuilder.Entity("Domain.BookGenre", b =>
                {
                    b.Property<Guid>("Bk_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Gn_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BkGn_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BkGn_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("BkGn_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BkGn_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BkGn_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BkGn_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Bk_ID", "Gn_ID");

                    b.HasIndex("BkGn_Creator");

                    b.HasIndex("BkGn_Modifier");

                    b.HasIndex("Gn_ID");

                    b.ToTable("BookGenres");
                });

            modelBuilder.Entity("Domain.BookPublisher", b =>
                {
                    b.Property<Guid>("Bk_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Pb_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BkPb_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BkPb_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("BkPb_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BkPb_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BkPb_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BkPb_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Bk_ID", "Pb_ID");

                    b.HasIndex("BkPb_Creator");

                    b.HasIndex("BkPb_Modifier");

                    b.HasIndex("Pb_ID");

                    b.ToTable("BookPublishers");
                });

            modelBuilder.Entity("Domain.BookTag", b =>
                {
                    b.Property<Guid>("Bk_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Tg_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BkTg_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BkTg_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("BkTg_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BkTg_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BkTg_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BkTg_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Bk_ID", "Tg_ID");

                    b.HasIndex("BkTg_Creator");

                    b.HasIndex("BkTg_Modifier");

                    b.HasIndex("Tg_ID");

                    b.ToTable("BookTags");
                });

            modelBuilder.Entity("Domain.BookThematicArea", b =>
                {
                    b.Property<Guid>("Bk_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Th_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("BkTh_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("BkTh_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("BkTh_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BkTh_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("BkTh_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("BkTh_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Bk_ID", "Th_ID");

                    b.HasIndex("BkTh_Creator");

                    b.HasIndex("BkTh_Modifier");

                    b.HasIndex("Th_ID");

                    b.ToTable("BookThematicAreas");
                });

            modelBuilder.Entity("Domain.Category", b =>
                {
                    b.Property<Guid>("Ct_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ct_Active")
                        .HasColumnType("bit");

                    b.Property<Guid?>("Ct_ClassificationID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Ct_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Ct_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ct_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ct_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ct_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Ct_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ct_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ct_Name_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ct_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ct_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Md_ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Ct_ID");

                    b.HasIndex("Ct_ClassificationID");

                    b.HasIndex("Ct_Creator");

                    b.HasIndex("Ct_Modifier");

                    b.HasIndex("Md_ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.CategoryTag", b =>
                {
                    b.Property<Guid>("Ct_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Tg_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CtTg_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CtTg_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CtTg_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CtTg_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("CtTg_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CtTg_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Ct_ID", "Tg_ID");

                    b.HasIndex("CtTg_Creator");

                    b.HasIndex("CtTg_Modifier");

                    b.HasIndex("Tg_ID");

                    b.ToTable("CategoryTags");
                });

            modelBuilder.Entity("Domain.Country", b =>
                {
                    b.Property<Guid>("Cn_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Cn_Active")
                        .HasColumnType("bit");

                    b.Property<int>("Cn_Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("Cn_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Cn_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Cn_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cn_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cn_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Cn_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cn_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cn_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Md_ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Cn_ID");

                    b.HasIndex("Cn_Creator");

                    b.HasIndex("Cn_Modifier");

                    b.HasIndex("Md_ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Domain.CustomerCategory", b =>
                {
                    b.Property<string>("Cs_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("Ct_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CsCt_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CsCt_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CsCt_Creator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CsCt_Modifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CsCt_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CsCt_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Cs_ID", "Ct_ID");

                    b.HasIndex("Ct_ID");

                    b.ToTable("CustomerCategories");
                });

            modelBuilder.Entity("Domain.CustomerGenre", b =>
                {
                    b.Property<string>("Cs_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("Gn_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CsGn_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CsGn_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CsGn_Creator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CsGn_Modifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CsGn_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CsGn_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Cs_ID", "Gn_ID");

                    b.HasIndex("Gn_ID");

                    b.ToTable("CustomerGenres");
                });

            modelBuilder.Entity("Domain.CustomerGroup", b =>
                {
                    b.Property<string>("Cs_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("Gr_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CsGr_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CsGr_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CsGr_Creator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CsGr_Modifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CsGr_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CsGr_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Cs_ID", "Gr_ID");

                    b.HasIndex("Gr_ID");

                    b.ToTable("CustomerGroups");
                });

            modelBuilder.Entity("Domain.CustomerReward", b =>
                {
                    b.Property<string>("Cs_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("Rw_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CsRw_Active")
                        .HasColumnType("bit");

                    b.Property<int>("CsRw_Coins")
                        .HasColumnType("int");

                    b.Property<int>("CsRw_CoinsLeft")
                        .HasColumnType("int");

                    b.Property<DateTime>("CsRw_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CsRw_Creator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CsRw_Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CsRw_ExpiredOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CsRw_Modifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CsRw_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CsRw_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Cs_ID", "Rw_ID");

                    b.HasIndex("Rw_ID");

                    b.ToTable("CustomerRewards");
                });

            modelBuilder.Entity("Domain.CustomerTag", b =>
                {
                    b.Property<string>("Cs_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("Tg_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CsTg_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CsTg_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CsTg_Creator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CsTg_Modifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CsTg_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CsTg_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Cs_ID", "Tg_ID");

                    b.HasIndex("Tg_ID");

                    b.ToTable("CustomerTags");
                });

            modelBuilder.Entity("Domain.CustomerThematicArea", b =>
                {
                    b.Property<Guid>("CsTh_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CsTh_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CsTh_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("CsTh_Creator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CsTh_Modifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CsTh_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CsTh_Ordinal")
                        .HasColumnType("int");

                    b.Property<string>("Cs_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("Th_ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CsTh_ID");

                    b.HasIndex("Cs_ID");

                    b.HasIndex("Th_ID");

                    b.ToTable("CustomerThematicAreas");
                });

            modelBuilder.Entity("Domain.Genre", b =>
                {
                    b.Property<Guid>("Gn_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Gn_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Gn_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Gn_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gn_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gn_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gn_Modifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Gn_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gn_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gn_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifierId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Gn_ID");

                    b.HasIndex("Gn_Creator");

                    b.HasIndex("ModifierId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Domain.GiftPayment", b =>
                {
                    b.Property<Guid>("Pm_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PM_CouponCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PM_GiftedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<bool>("PM_MailSent")
                        .HasColumnType("bit");

                    b.Property<string>("PM_Recipient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PM_Used")
                        .HasColumnType("bit");

                    b.Property<bool>("Pm_Active")
                        .HasColumnType("bit");

                    b.Property<string>("Pm_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Pm_CreatorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pm_Days")
                        .HasColumnType("int");

                    b.Property<double>("Pm_DisplayPrice")
                        .HasColumnType("float");

                    b.Property<int>("Pm_Ordinal")
                        .HasColumnType("int");

                    b.Property<double>("Pm_Price")
                        .HasColumnType("float");

                    b.Property<string>("Pm_RefernceID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pm_Result")
                        .HasColumnType("int");

                    b.Property<Guid>("Py_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Sb_ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Pm_ID");

                    b.HasIndex("Pm_Creator");

                    b.HasIndex("Py_ID");

                    b.HasIndex("Sb_ID");

                    b.ToTable("GiftPayments");
                });

            modelBuilder.Entity("Domain.Group", b =>
                {
                    b.Property<Guid>("Gr_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Gr_Active")
                        .HasColumnType("bit");

                    b.Property<int>("Gr_AgeFrom")
                        .HasColumnType("int");

                    b.Property<int>("Gr_AgeTill")
                        .HasColumnType("int");

                    b.Property<DateTime>("Gr_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Gr_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Gr_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gr_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gr_Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gr_Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gr_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Gr_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Gr_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gr_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Gr_ID");

                    b.HasIndex("Gr_Creator");

                    b.HasIndex("Gr_Modifier");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Domain.GroupCategory", b =>
                {
                    b.Property<Guid>("Gr_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Ct_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("GrCt_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("GrCt_CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrCt_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GrCt_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("GrCt_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("GrCt_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Gr_ID", "Ct_ID");

                    b.HasIndex("Ct_ID");

                    b.HasIndex("GrCt_Creator");

                    b.HasIndex("GrCt_Modifier");

                    b.ToTable("GroupCategory");
                });

            modelBuilder.Entity("Domain.GroupGenre", b =>
                {
                    b.Property<Guid>("Gr_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Gn_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("GrGn_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("GrGn_CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrGn_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GrGn_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("GrGn_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("GrGn_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Gr_ID", "Gn_ID");

                    b.HasIndex("Gn_ID");

                    b.HasIndex("GrGn_Creator");

                    b.HasIndex("GrGn_Modifier");

                    b.ToTable("GroupGenre");
                });

            modelBuilder.Entity("Domain.GroupTag", b =>
                {
                    b.Property<Guid>("Gr_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Tg_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("GrTg_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("GrTg_CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrTg_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GrTg_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("GrTg_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("GrTg_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Gr_ID", "Tg_ID");

                    b.HasIndex("GrTg_Creator");

                    b.HasIndex("GrTg_Modifier");

                    b.HasIndex("Tg_ID");

                    b.ToTable("GroupTag");
                });

            modelBuilder.Entity("Domain.GroupThematicArea", b =>
                {
                    b.Property<Guid>("Gr_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Th_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("GrTh_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("GrTh_CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GrTh_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("GrTh_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("GrTh_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("GrTh_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Gr_ID", "Th_ID");

                    b.HasIndex("GrTh_Creator");

                    b.HasIndex("GrTh_Modifier");

                    b.HasIndex("Th_ID");

                    b.ToTable("GroupThematicArea");
                });

            modelBuilder.Entity("Domain.Medium", b =>
                {
                    b.Property<Guid>("Md_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Bk_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Md_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Md_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Md_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Md_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Md_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Md_Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Md_FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Md_FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Md_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Md_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Md_Ordinal")
                        .HasColumnType("int");

                    b.Property<string>("Md_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Md_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Md_URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Md_ID");

                    b.HasIndex("Bk_ID");

                    b.HasIndex("Md_Creator");

                    b.HasIndex("Md_Modifier");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.Property<Guid>("Or_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cs_ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Or_Active")
                        .HasColumnType("bit");

                    b.Property<Guid>("Or_AddressID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Or_BillingAddressID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Or_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Or_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Or_CustomerNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Or_IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Or_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Or_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Or_PaymentDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Or_PaymentNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Or_PaymentReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Or_PaymentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Or_PromotionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Or_StaffNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Or_Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Or_SubTotal")
                        .HasColumnType("float");

                    b.Property<double>("Or_Total")
                        .HasColumnType("float");

                    b.Property<double>("Or_TotalDiscount")
                        .HasColumnType("float");

                    b.Property<double>("Or_Vat")
                        .HasColumnType("float");

                    b.Property<Guid?>("Py_ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Or_ID");

                    b.HasIndex("Cs_ID");

                    b.HasIndex("Or_AddressID");

                    b.HasIndex("Or_BillingAddressID");

                    b.HasIndex("Or_Creator");

                    b.HasIndex("Or_Modifier");

                    b.HasIndex("Py_ID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.OrderSubscription", b =>
                {
                    b.Property<Guid>("Or_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Sb_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("OrSb_Active")
                        .HasColumnType("bit");

                    b.Property<string>("OrSb_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrSb_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("OrSb_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrSb_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrSb_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrSb_Discount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("OrSb_Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrSb_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrSb_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrSb_Name_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrSb_Ordinal")
                        .HasColumnType("int");

                    b.Property<double>("OrSb_Price")
                        .HasColumnType("float");

                    b.Property<int>("OrSb_Quantity")
                        .HasColumnType("int");

                    b.Property<double>("OrSb_SubTotal")
                        .HasColumnType("float");

                    b.Property<string>("OrSb_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrSb_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Or_ID", "Sb_ID");

                    b.HasIndex("OrSb_Creator");

                    b.HasIndex("OrSb_Modifier");

                    b.HasIndex("Sb_ID");

                    b.ToTable("OrderSubscriptions");
                });

            modelBuilder.Entity("Domain.Payment", b =>
                {
                    b.Property<Guid>("Pm_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Pm_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Pm_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Pm_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Pm_Days")
                        .HasColumnType("int");

                    b.Property<double>("Pm_DisplayPrice")
                        .HasColumnType("float");

                    b.Property<int>("Pm_Ordinal")
                        .HasColumnType("int");

                    b.Property<double>("Pm_Price")
                        .HasColumnType("float");

                    b.Property<string>("Pm_RefernceID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pm_Result")
                        .HasColumnType("int");

                    b.Property<string>("Pm_Subscriber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("Py_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Sb_ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Pm_ID");

                    b.HasIndex("Pm_Creator");

                    b.HasIndex("Pm_Subscriber");

                    b.HasIndex("Py_ID");

                    b.HasIndex("Sb_ID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Domain.PaymentMethod", b =>
                {
                    b.Property<Guid>("Py_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Py_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Py_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Py_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Py_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Py_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Py_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Py_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Py_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Py_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Py_ID");

                    b.HasIndex("Py_Creator");

                    b.HasIndex("Py_Modifier");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("Domain.Publisher", b =>
                {
                    b.Property<Guid>("Pb_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Cn_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Md_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Pb_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Pb_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Pb_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Pb_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pb_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pb_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Pb_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Pb_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pb_Name_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pb_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pb_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pb_ID");

                    b.HasIndex("Cn_ID");

                    b.HasIndex("Md_ID");

                    b.HasIndex("Pb_Creator");

                    b.HasIndex("Pb_Modifier");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("Domain.PublisherGenre", b =>
                {
                    b.Property<Guid>("Pb_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Gn_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("PbGn_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PbGn_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("PbGn_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("PbGn_ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PbGn_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PbGn_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Pb_ID", "Gn_ID");

                    b.HasIndex("Gn_ID");

                    b.HasIndex("PbGn_Creator");

                    b.HasIndex("PbGn_Modifier");

                    b.ToTable("PublisherGenres");
                });

            modelBuilder.Entity("Domain.Reward", b =>
                {
                    b.Property<Guid>("Rw_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Md_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Rw_Active")
                        .HasColumnType("bit");

                    b.Property<int>("Rw_Coins")
                        .HasColumnType("int");

                    b.Property<DateTime>("Rw_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Rw_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Rw_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rw_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rw_Duration")
                        .HasColumnType("int");

                    b.Property<string>("Rw_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Rw_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Rw_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rw_Name_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rw_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rw_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Rw_ID");

                    b.HasIndex("Md_ID");

                    b.HasIndex("Rw_Creator");

                    b.HasIndex("Rw_Modifier");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("Domain.RewardGroup", b =>
                {
                    b.Property<Guid>("Rw_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Gr_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("RwGr_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RwGr_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("RwGr_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RwGr_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RwGr_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RwGr_Ordinal")
                        .HasColumnType("int");

                    b.HasKey("Rw_Id", "Gr_ID");

                    b.HasIndex("Gr_ID");

                    b.HasIndex("RwGr_Creator");

                    b.HasIndex("RwGr_Modifier");

                    b.ToTable("RewardGroups");
                });

            modelBuilder.Entity("Domain.Subscription", b =>
                {
                    b.Property<Guid>("Sb_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Md_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Sb_Active")
                        .HasColumnType("bit");

                    b.Property<string>("Sb_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Sb_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Sb_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Sb_Days")
                        .HasColumnType("int");

                    b.Property<string>("Sb_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sb_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sb_DiscountDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sb_DiscountDesc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Sb_DisplayPrice")
                        .HasColumnType("float");

                    b.Property<string>("Sb_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Sb_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sb_Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sb_Name_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Sb_Price")
                        .HasColumnType("float");

                    b.Property<string>("Sb_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sb_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Sb_ID");

                    b.HasIndex("Md_ID");

                    b.HasIndex("Sb_Creator");

                    b.HasIndex("Sb_Modifier");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Domain.SuggestBook", b =>
                {
                    b.Property<Guid>("Bk_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bk_Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bk_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bk_Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Bk_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Bk_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Bk_Editor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bk_Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bk_Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Bk_ID");

                    b.HasIndex("Bk_Creator");

                    b.ToTable("SugggestBook");
                });

            modelBuilder.Entity("Domain.Tag", b =>
                {
                    b.Property<Guid>("Tg_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Tg_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Tg_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Tg_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Tg_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tg_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tg_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Tg_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tg_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tg_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Tg_ID");

                    b.HasIndex("Tg_Creator");

                    b.HasIndex("Tg_Modifier");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Domain.ThematicArea", b =>
                {
                    b.Property<Guid>("Th_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Th_Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Th_CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<string>("Th_Creator")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Th_Desc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Th_Desc_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Th_Modifier")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Th_ModifyOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Th_Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Th_Title_Ar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Th_ID");

                    b.HasIndex("Th_Creator");

                    b.HasIndex("Th_Modifier");

                    b.ToTable("ThematicAreas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Address", b =>
                {
                    b.HasOne("Domain.Country", "Country")
                        .WithMany()
                        .HasForeignKey("Cn_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("Us_ID");

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Announcement", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("An_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("An_Modifier");

                    b.HasOne("Domain.Medium", "Image")
                        .WithMany()
                        .HasForeignKey("Md_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Image");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.AnnouncementChannel", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("AnCh_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("AnCh_Modifier");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.AnnouncementCondition", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("AnCn_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("AnCn_Modifier");

                    b.HasOne("Domain.AnnouncementPriority", "AnnouncementPriority")
                        .WithMany("Conditions")
                        .HasForeignKey("AnPr_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Announcement", "Announcement")
                        .WithMany("Conditions")
                        .HasForeignKey("An_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("AnnouncementPriority");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.AnnouncementConditionAnnouncementChannel", b =>
                {
                    b.HasOne("Domain.AnnouncementChannel", "Channel")
                        .WithMany("Conditions")
                        .HasForeignKey("AnCh_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("AnCnGr_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("AnCnGr_Modifier");

                    b.HasOne("Domain.AnnouncementCondition", "Condition")
                        .WithMany("Channels")
                        .HasForeignKey("AnCn_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Condition");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.AnnouncementConditionGroup", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("AnCnGr_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("AnCnGr_Modifier");

                    b.HasOne("Domain.AnnouncementCondition", "Condition")
                        .WithMany("Groups")
                        .HasForeignKey("AnCn_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Group", "Group")
                        .WithMany()
                        .HasForeignKey("Gr_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Condition");

                    b.Navigation("Creator");

                    b.Navigation("Group");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.AnnouncementMessage", b =>
                {
                    b.HasOne("Domain.AnnouncementChannel", "Channel")
                        .WithMany()
                        .HasForeignKey("AnCh_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("AnMs_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("AnMs_Modifier");

                    b.HasOne("Domain.AnnouncementPriority", "Priority")
                        .WithMany("Messages")
                        .HasForeignKey("AnPr_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Announcement", "Announcement")
                        .WithMany("Messages")
                        .HasForeignKey("An_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "Customer")
                        .WithMany()
                        .HasForeignKey("Cs_ID");

                    b.Navigation("Announcement");

                    b.Navigation("Channel");

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("Modifier");

                    b.Navigation("Priority");
                });

            modelBuilder.Entity("Domain.AnnouncementPriority", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("AnPr_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("AnPr_Modifier");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Us_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("Us_Modifier");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.Author", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("At_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("At_Modifier");

                    b.HasOne("Domain.Medium", "Image")
                        .WithMany()
                        .HasForeignKey("Md_ID");

                    b.Navigation("Creator");

                    b.Navigation("Image");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.AuthorGenre", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("AtGn_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("AtGn_Modifier");

                    b.HasOne("Domain.Author", "Author")
                        .WithMany("Genres")
                        .HasForeignKey("At_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Genre", "Genre")
                        .WithMany("Authors")
                        .HasForeignKey("Gn_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Creator");

                    b.Navigation("Genre");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.Avatar", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Av_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("Av_Modifier");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.Banner", b =>
                {
                    b.HasOne("Domain.BannerLocation", "BannerLocation")
                        .WithMany("Banners")
                        .HasForeignKey("Bl_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Bn_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("Bn_Modifier");

                    b.HasOne("Domain.Group", "Group")
                        .WithMany()
                        .HasForeignKey("Gr_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BannerLocation");

                    b.Navigation("Creator");

                    b.Navigation("Group");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.BannerBannerLocation", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("BnBl_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("BnBl_Modifier");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.BannerGroup", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("BnGr_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("BnGr_Modifier");

                    b.HasOne("Domain.Banner", "Banner")
                        .WithMany()
                        .HasForeignKey("Bn_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Group", "Group")
                        .WithMany("Banners")
                        .HasForeignKey("Gr_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Banner");

                    b.Navigation("Creator");

                    b.Navigation("Group");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.BannerLocation", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Bl_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("Bl_Modifier");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.Book", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Bk_Creator");

                    b.HasOne("Domain.AppUser", "BookViewer")
                        .WithMany()
                        .HasForeignKey("Bk_LastViewedBy");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("Bk_Modifier");

                    b.HasOne("Domain.Medium", "Md_AudioAr")
                        .WithMany()
                        .HasForeignKey("Md_AudioAr_ID");

                    b.HasOne("Domain.Medium", "Md_AudioEn")
                        .WithMany()
                        .HasForeignKey("Md_AudioEn_ID");

                    b.Navigation("BookViewer");

                    b.Navigation("Creator");

                    b.Navigation("Md_AudioAr");

                    b.Navigation("Md_AudioEn");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.BookAuthor", b =>
                {
                    b.HasOne("Domain.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("At_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("BkAt_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("BkAt_Modifier");

                    b.HasOne("Domain.Book", "Book")
                        .WithMany("Authors")
                        .HasForeignKey("Bk_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.BookBookCollection", b =>
                {
                    b.HasOne("Domain.BookCollection", "Collection")
                        .WithMany("Books")
                        .HasForeignKey("Bc_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("BkBc_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("BkBc_Modifier");

                    b.HasOne("Domain.Book", "Book")
                        .WithMany()
                        .HasForeignKey("Bk_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Collection");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.BookCategory", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("BkCt_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("BkCt_Modifier");

                    b.HasOne("Domain.Book", "Book")
                        .WithMany("Categories")
                        .HasForeignKey("Bk_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("Ct_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.BookCollection", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Bc_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("Bc_Modifier");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.BookGenre", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("BkGn_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("BkGn_Modifier");

                    b.HasOne("Domain.Book", "Book")
                        .WithMany("Genres")
                        .HasForeignKey("Bk_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("Gn_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Creator");

                    b.Navigation("Genre");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.BookPublisher", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("BkPb_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("BkPb_Modifier");

                    b.HasOne("Domain.Book", "Book")
                        .WithMany("Publishers")
                        .HasForeignKey("Bk_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("Pb_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Domain.BookTag", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("BkTg_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("BkTg_Modifier");

                    b.HasOne("Domain.Book", "Book")
                        .WithMany("Tags")
                        .HasForeignKey("Bk_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Tag", "Tag")
                        .WithMany("Books")
                        .HasForeignKey("Tg_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.BookThematicArea", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("BkTh_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("BkTh_Modifier");

                    b.HasOne("Domain.Book", "Book")
                        .WithMany("ThematicAreas")
                        .HasForeignKey("Bk_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.ThematicArea", "ThematicArea")
                        .WithMany("Books")
                        .HasForeignKey("Th_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("ThematicArea");
                });

            modelBuilder.Entity("Domain.Category", b =>
                {
                    b.HasOne("Domain.Category", "Classification")
                        .WithMany("SubCategories")
                        .HasForeignKey("Ct_ClassificationID");

                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Ct_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("Ct_Modifier");

                    b.HasOne("Domain.Medium", "Image")
                        .WithMany()
                        .HasForeignKey("Md_ID");

                    b.Navigation("Classification");

                    b.Navigation("Creator");

                    b.Navigation("Image");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.CategoryTag", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CtTg_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("CtTg_Modifier");

                    b.HasOne("Domain.Category", "Category")
                        .WithMany("Tags")
                        .HasForeignKey("Ct_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Tag", "Tag")
                        .WithMany("Categories")
                        .HasForeignKey("Tg_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Country", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Cn_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("Cn_Modifier");

                    b.HasOne("Domain.Medium", "Flag")
                        .WithMany()
                        .HasForeignKey("Md_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Flag");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.CustomerCategory", b =>
                {
                    b.HasOne("Domain.AppUser", "Customer")
                        .WithMany("Categories")
                        .HasForeignKey("Cs_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Category", "Category")
                        .WithMany("Customers")
                        .HasForeignKey("Ct_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.CustomerGenre", b =>
                {
                    b.HasOne("Domain.AppUser", "Customer")
                        .WithMany("Genres")
                        .HasForeignKey("Cs_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Genre", "Genre")
                        .WithMany("Customers")
                        .HasForeignKey("Gn_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Domain.CustomerGroup", b =>
                {
                    b.HasOne("Domain.AppUser", "Customer")
                        .WithMany("Groups")
                        .HasForeignKey("Cs_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Group", "Group")
                        .WithMany()
                        .HasForeignKey("Gr_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Domain.CustomerReward", b =>
                {
                    b.HasOne("Domain.AppUser", "Customer")
                        .WithMany()
                        .HasForeignKey("Cs_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Reward", "Reward")
                        .WithMany("Customers")
                        .HasForeignKey("Rw_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Reward");
                });

            modelBuilder.Entity("Domain.CustomerTag", b =>
                {
                    b.HasOne("Domain.AppUser", "Customer")
                        .WithMany("Tags")
                        .HasForeignKey("Cs_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("Tg_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.CustomerThematicArea", b =>
                {
                    b.HasOne("Domain.AppUser", "Customer")
                        .WithMany("ThematicAreas")
                        .HasForeignKey("Cs_ID");

                    b.HasOne("Domain.ThematicArea", "ThematicArea")
                        .WithMany("Customers")
                        .HasForeignKey("Th_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("ThematicArea");
                });

            modelBuilder.Entity("Domain.Genre", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Gn_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifierId");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.GiftPayment", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Pm_Creator");

                    b.HasOne("Domain.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("Py_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("Sb_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Domain.Group", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Gr_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("Gr_Modifier");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.GroupCategory", b =>
                {
                    b.HasOne("Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("Ct_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("GrCt_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("GrCt_Modifier");

                    b.HasOne("Domain.Group", "Group")
                        .WithMany("Categories")
                        .HasForeignKey("Gr_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Creator");

                    b.Navigation("Group");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.GroupGenre", b =>
                {
                    b.HasOne("Domain.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("Gn_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("GrGn_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("GrGn_Modifier");

                    b.HasOne("Domain.Group", "Group")
                        .WithMany("Genres")
                        .HasForeignKey("Gr_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Genre");

                    b.Navigation("Group");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.GroupTag", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("GrTg_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("GrTg_Modifier");

                    b.HasOne("Domain.Group", "Group")
                        .WithMany("Tags")
                        .HasForeignKey("Gr_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("Tg_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Group");

                    b.Navigation("Modifier");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.GroupThematicArea", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("GrTh_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("GrTh_Modifier");

                    b.HasOne("Domain.Group", "Group")
                        .WithMany("ThematicAreas")
                        .HasForeignKey("Gr_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.ThematicArea", "ThematicArea")
                        .WithMany()
                        .HasForeignKey("Th_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Group");

                    b.Navigation("Modifier");

                    b.Navigation("ThematicArea");
                });

            modelBuilder.Entity("Domain.Medium", b =>
                {
                    b.HasOne("Domain.Book", "Book")
                        .WithMany("Media")
                        .HasForeignKey("Bk_ID");

                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Md_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("Md_Modifier");

                    b.Navigation("Book");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.HasOne("Domain.AppUser", "Customer")
                        .WithMany()
                        .HasForeignKey("Cs_ID");

                    b.HasOne("Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("Or_AddressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("Or_BillingAddressID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Or_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("Or_Modifier");

                    b.HasOne("Domain.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("Py_ID");

                    b.Navigation("Address");

                    b.Navigation("BillingAddress");

                    b.Navigation("Creator");

                    b.Navigation("Customer");

                    b.Navigation("Modifier");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Domain.OrderSubscription", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("OrSb_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("OrSb_Modifier");

                    b.HasOne("Domain.Order", "Order")
                        .WithMany("Subscriptions")
                        .HasForeignKey("Or_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("Sb_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Modifier");

                    b.Navigation("Order");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Domain.Payment", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Pm_Creator");

                    b.HasOne("Domain.AppUser", "Subscriber")
                        .WithMany()
                        .HasForeignKey("Pm_Subscriber");

                    b.HasOne("Domain.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("Py_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Subscription", "Subscription")
                        .WithMany("Payments")
                        .HasForeignKey("Sb_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Subscriber");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Domain.PaymentMethod", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Py_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("Py_Modifier");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.Publisher", b =>
                {
                    b.HasOne("Domain.Country", "Country")
                        .WithMany("Publishers")
                        .HasForeignKey("Cn_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Medium", "BrandLogo")
                        .WithMany()
                        .HasForeignKey("Md_ID");

                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Pb_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("Pb_Modifier");

                    b.Navigation("BrandLogo");

                    b.Navigation("Country");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.PublisherGenre", b =>
                {
                    b.HasOne("Domain.Genre", "Genre")
                        .WithMany("Publishers")
                        .HasForeignKey("Gn_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("PbGn_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("PbGn_Modifier");

                    b.HasOne("Domain.Publisher", "Publisher")
                        .WithMany("Genres")
                        .HasForeignKey("Pb_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Genre");

                    b.Navigation("Modifier");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Domain.Reward", b =>
                {
                    b.HasOne("Domain.Medium", "Image")
                        .WithMany()
                        .HasForeignKey("Md_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Rw_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("Rw_Modifier");

                    b.Navigation("Creator");

                    b.Navigation("Image");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.RewardGroup", b =>
                {
                    b.HasOne("Domain.Group", "Group")
                        .WithMany()
                        .HasForeignKey("Gr_ID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("RwGr_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("RwGr_Modifier");

                    b.HasOne("Domain.Reward", "Reward")
                        .WithMany("Groups")
                        .HasForeignKey("Rw_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Group");

                    b.Navigation("Modifier");

                    b.Navigation("Reward");
                });

            modelBuilder.Entity("Domain.Subscription", b =>
                {
                    b.HasOne("Domain.Medium", "Image")
                        .WithMany()
                        .HasForeignKey("Md_ID");

                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Sb_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("Sb_Modifier");

                    b.Navigation("Creator");

                    b.Navigation("Image");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.SuggestBook", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Bk_Creator");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Domain.Tag", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Tg_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("Tg_Modifier");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Domain.ThematicArea", b =>
                {
                    b.HasOne("Domain.AppUser", "Creator")
                        .WithMany()
                        .HasForeignKey("Th_Creator");

                    b.HasOne("Domain.AppUser", "Modifier")
                        .WithMany()
                        .HasForeignKey("Th_Modifier");

                    b.Navigation("Creator");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Announcement", b =>
                {
                    b.Navigation("Conditions");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.AnnouncementChannel", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("Domain.AnnouncementCondition", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Domain.AnnouncementPriority", b =>
                {
                    b.Navigation("Conditions");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.AppUser", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Categories");

                    b.Navigation("Genres");

                    b.Navigation("Groups");

                    b.Navigation("Tags");

                    b.Navigation("ThematicAreas");
                });

            modelBuilder.Entity("Domain.Author", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Genres");
                });

            modelBuilder.Entity("Domain.BannerLocation", b =>
                {
                    b.Navigation("Banners");
                });

            modelBuilder.Entity("Domain.Book", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Categories");

                    b.Navigation("Genres");

                    b.Navigation("Media");

                    b.Navigation("Publishers");

                    b.Navigation("Tags");

                    b.Navigation("ThematicAreas");
                });

            modelBuilder.Entity("Domain.BookCollection", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Domain.Category", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Customers");

                    b.Navigation("SubCategories");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Domain.Country", b =>
                {
                    b.Navigation("Publishers");
                });

            modelBuilder.Entity("Domain.Genre", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Books");

                    b.Navigation("Customers");

                    b.Navigation("Publishers");
                });

            modelBuilder.Entity("Domain.Group", b =>
                {
                    b.Navigation("Banners");

                    b.Navigation("Categories");

                    b.Navigation("Genres");

                    b.Navigation("Tags");

                    b.Navigation("ThematicAreas");
                });

            modelBuilder.Entity("Domain.Order", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Domain.Publisher", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Genres");
                });

            modelBuilder.Entity("Domain.Reward", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Domain.Subscription", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Domain.Tag", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("Domain.ThematicArea", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Customers");
                });
#pragma warning restore 612, 618
        }
    }
}
